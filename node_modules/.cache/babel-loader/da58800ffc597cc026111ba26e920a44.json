{"ast":null,"code":"var _jsxFileName = \"/Users/zhiyang/Documents/Portfolio/React-The Complete Guide/food-order/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\n// store cart management logic in here to keep App.js clean\nimport CartContext from \"./cart-context\";\nimport { useReducer, userReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // cartReducer won't need anything from CartProvider component, and it shouldn't be recreated all the time\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // concat() adds a new item but unlike push, it doesn't edit the existing array but return a new array\n    // we don't want to edit old state snapshot, we want generate a brand new state object\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  //user hooks to make sure whenever cartState change, CartProvider is render again\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/zhiyang/Documents/Portfolio/React-The Complete Guide/food-order/src/store/CartProvider.js"],"names":["CartContext","useReducer","userReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AAEA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;;AAEA,MAAMC,gBAAgB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,WAAW,EAAE;AAFW,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AAC1B;AACA;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GACvBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADrD;AAEA,WAAO;AACNX,MAAAA,KAAK,EAAEM,YADD;AAENL,MAAAA,WAAW,EAAEQ;AAFP,KAAP;AAIA;;AACD,SAAOV,gBAAP;AACA,CAbD;;AAeA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC/B;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CACjDK,WADiD,EAEjDH,gBAFiD,CAAlD;;AAKA,QAAMiB,oBAAoB,GAAIR,IAAD,IAAU;AACtCO,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACA,GAFD;;AAGA,QAAMS,yBAAyB,GAAIC,EAAD,IAAQ;AACzCH,IAAAA,kBAAkB,CAAC;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBa,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACA,GAFD;;AAIA,QAAMC,WAAW,GAAG;AACnBnB,IAAAA,KAAK,EAAEc,SAAS,CAACd,KADE;AAEnBC,IAAAA,WAAW,EAAEa,SAAS,CAACb,WAFJ;AAGnBmB,IAAAA,OAAO,EAAEJ,oBAHU;AAInBK,IAAAA,UAAU,EAAEJ;AAJO,GAApB;AAMA,sBACC,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACEN,KAAK,CAACS;AADR;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAzBD;;GAAMV,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["// store cart management logic in here to keep App.js clean\n\nimport CartContext from \"./cart-context\";\nimport { useReducer, userReducer } from \"react\";\n\nconst defaultCartState = {\n\titems: [],\n\ttotalAmount: 0,\n};\n// cartReducer won't need anything from CartProvider component, and it shouldn't be recreated all the time\nconst cartReducer = (state, action) => {\n\tif (action.type === \"ADD\") {\n\t\t// concat() adds a new item but unlike push, it doesn't edit the existing array but return a new array\n\t\t// we don't want to edit old state snapshot, we want generate a brand new state object\n\t\tconst updatedItems = state.items.concat(action.item);\n\t\tconst updatedTotalAmount =\n\t\t\tstate.totalAmount + action.item.price * action.item.amount;\n\t\treturn {\n\t\t\titems: updatedItems,\n\t\t\ttotalAmount: updatedTotalAmount,\n\t\t};\n\t}\n\treturn defaultCartState;\n};\n\nconst CartProvider = (props) => {\n\t//user hooks to make sure whenever cartState change, CartProvider is render again\n\tconst [cartState, dispatchCartAction] = useReducer(\n\t\tcartReducer,\n\t\tdefaultCartState\n\t);\n\n\tconst addItemToCartHandler = (item) => {\n\t\tdispatchCartAction({ type: \"ADD\", item: item });\n\t};\n\tconst removeItemFromCartHandler = (id) => {\n\t\tdispatchCartAction({ type: \"REMOVE\", id: id });\n\t};\n\n\tconst cartContext = {\n\t\titems: cartState.items,\n\t\ttotalAmount: cartState.totalAmount,\n\t\taddItem: addItemToCartHandler,\n\t\tremoveItem: removeItemFromCartHandler,\n\t};\n\treturn (\n\t\t<CartContext.Provider value={cartContext}>\n\t\t\t{props.children}\n\t\t</CartContext.Provider>\n\t);\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}